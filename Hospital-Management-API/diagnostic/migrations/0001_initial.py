# Generated by Django 5.0.7 on 2025-07-20 07:09

import diagnostic.models
import diagnostic.utils
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('consultations', '0004_advice_unique_custom_advice_per_consultation'),
        ('patient_account', '0002_patientaccount_is_active_patientprofile_is_active'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ImagingView',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, help_text='Optional details about the imaging view usage', max_length=50, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BookingGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('booked_by', models.CharField(choices=[('patient', 'Patient'), ('helpdesk', 'Helpdesk')], default='patient', max_length=30)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CONFIRMED', 'Confirmed'), ('SCHEDULED', 'Scheduled'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='PENDING', help_text='Overall group booking status', max_length=20)),
                ('is_home_collection', models.BooleanField(default=False)),
                ('preferred_schedule_time', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('lab_grouping_type', models.CharField(choices=[('single_lab', 'Single Lab'), ('multi_lab', 'Multi Lab')], default='single_lab', help_text='Indicates if all tests were booked under one lab or multiple', max_length=20)),
                ('total_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('source', models.CharField(blank=True, help_text='e.g., patient_app, helpdesk_panel', max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('consultation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='booking_groups', to='consultations.consultation')),
                ('patient_profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='booking_groups', to='patient_account.patientprofile')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DiagnosticLab',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('contact', models.CharField(blank=True, max_length=100, null=True)),
                ('service_pincodes', models.JSONField(blank=True, default=list)),
                ('commission_percent', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('doctor_commission_percent', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('certifications', models.TextField(blank=True, help_text='e.g., NABL, ISO', null=True)),
                ('license_number', models.CharField(blank=True, max_length=100, null=True)),
                ('license_valid_till', models.DateField(blank=True, null=True)),
                ('lab_type', models.CharField(choices=[('collection_center', 'Collection Center'), ('diagnostic_lab', 'Diagnostic Lab'), ('pathology_lab', 'Pathology Lab'), ('radiology_center', 'Radiology Center')], default='diagnostic_lab', max_length=100)),
                ('test_types_supported', models.JSONField(blank=True, default=list, help_text="E.g., ['blood', 'urine', 'MRI', 'CT', 'ultrasound']")),
                ('home_sample_collection', models.BooleanField(default=False)),
                ('sample_pickup_timings', models.CharField(blank=True, max_length=255, null=True)),
                ('report_delivery_timings', models.CharField(blank=True, max_length=255, null=True)),
                ('turnaround_time_hours', models.IntegerField(default=24, help_text='Default TAT for reports')),
                ('pricing_tier', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('premium', 'Premium')], default='medium', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DiagnosticLabAddress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('address', models.TextField(default='NA', max_length=255)),
                ('address2', models.TextField(default='NA', max_length=255)),
                ('city', models.CharField(default='NA', max_length=100)),
                ('state', models.CharField(default='NA', max_length=100)),
                ('pincode', models.CharField(default='NA', max_length=10)),
                ('country', models.CharField(default='India', max_length=100)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('google_place_id', models.CharField(blank=True, max_length=255, null=True)),
                ('google_maps_url', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lab', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='address', to='diagnostic.diagnosticlab')),
            ],
        ),
        migrations.CreateModel(
            name='LabAdminUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mobile_number', models.CharField(default='NA', max_length=15, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lab', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lab_admin', to='diagnostic.diagnosticlab')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lab_admin_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MedicalTest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('type', models.CharField(choices=[('blood', 'Blood Test'), ('xray', 'X-Ray'), ('ultrasound', 'Ultrasound'), ('ct', 'CT Scan'), ('mri', 'MRI Scan'), ('ecg', 'ECG'), ('echo', 'ECHO'), ('tmt', 'TMT'), ('pet', 'PET Scan'), ('eeg', 'EEG'), ('dexa', 'DEXA Scan'), ('prt', 'PRT Scan'), ('mammo', 'Mammography'), ('urine', 'Urine Test'), ('biopsy', 'Biopsy'), ('other', 'Other')], max_length=30)),
                ('description', models.TextField(blank=True, null=True)),
                ('default_instructions', models.TextField(blank=True, null=True)),
                ('standard_price', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('sample_required', models.CharField(blank=True, max_length=100, null=True)),
                ('fasting_required', models.BooleanField(default=False)),
                ('home_collection_supported', models.BooleanField(default=True, help_text='Indicates if this test is technically eligible for home sample collection')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('view', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='diagnostic.imagingview')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TestBooking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('test_price', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('tat_hours', models.PositiveIntegerField(blank=True, help_text='Snapshot of turnaround time', null=True)),
                ('is_home_collection', models.BooleanField(default=False)),
                ('scheduled_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CONFIRMED', 'Confirmed'), ('SCHEDULED', 'Scheduled'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('booked_by', models.CharField(choices=[('patient', 'Patient'), ('helpdesk', 'Helpdesk')], default='patient', max_length=30)),
                ('lab_approved_at', models.DateTimeField(blank=True, help_text='Time when lab confirmed the booking', null=True)),
                ('home_collection_confirmed', models.BooleanField(default=False)),
                ('home_collection_address', models.TextField(blank=True, null=True)),
                ('collector_name', models.CharField(blank=True, max_length=100, null=True)),
                ('collector_contact', models.CharField(blank=True, max_length=15, null=True)),
                ('home_collection_confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('booking_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='test_bookings', to='diagnostic.bookinggroup')),
                ('consultation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='test_bookings', to='consultations.consultation')),
                ('lab', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='test_bookings', to='diagnostic.diagnosticlab')),
                ('patient_profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='test_bookings', to='patient_account.patientprofile')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LabCommissionLedger',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('test_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('platform_commission_amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('doctor_commission_amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('lab_net_earning', models.DecimalField(decimal_places=2, max_digits=8)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnostic.diagnosticlab')),
                ('test', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='diagnostic.medicaltest')),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='diagnostic.testbooking')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TestCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
                ('modality', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['slug'], name='diagnostic__slug_305521_idx'), models.Index(fields=['is_active'], name='diagnostic__is_acti_74abbe_idx')],
            },
        ),
        migrations.AddField(
            model_name='medicaltest',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tests', to='diagnostic.testcategory'),
        ),
        migrations.CreateModel(
            name='TestLabMapping',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('is_available', models.BooleanField(default=True)),
                ('turnaround_time', models.PositiveIntegerField(help_text='In hours')),
                ('home_collection_available', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True, help_text='Is this mapping currently active?')),
                ('notes', models.TextField(blank=True, help_text='Any additional notes about this mapping', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnostic.diagnosticlab')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnostic.medicaltest')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='testbooking',
            name='lab_mapping',
            field=models.ForeignKey(blank=True, help_text='Lab mapping used for price/TAT', null=True, on_delete=django.db.models.deletion.SET_NULL, to='diagnostic.testlabmapping'),
        ),
        migrations.CreateModel(
            name='TestPackage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('category', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('standard_price', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tests', models.ManyToManyField(related_name='included_in_packages', to='diagnostic.medicaltest')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PackageRecommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notes', models.TextField(blank=True, null=True)),
                ('doctor_comment', models.TextField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('consultation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='package_recommendations', to='consultations.consultation')),
                ('recommended_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommended_packages', to='diagnostic.testpackage')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PackageLabMapping',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('is_available', models.BooleanField(default=True)),
                ('turnaround_time', models.PositiveIntegerField(help_text='In hours')),
                ('home_collection_available', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='package_mappings', to='diagnostic.diagnosticlab')),
                ('package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_mappings', to='diagnostic.testpackage')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TestRecommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('custom_name', models.CharField(blank=True, max_length=255, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('doctor_comment', models.TextField(blank=True, help_text='Internal doctor note for patient/context', null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('scheduled_for', models.DateTimeField(blank=True, help_text='Doctor-suggested preferred date', null=True)),
                ('test_pnr', models.CharField(db_index=True, default=diagnostic.models.generate_test_pnr, max_length=10, unique=True)),
                ('lab_advised', models.BooleanField(default=False)),
                ('test_status', models.CharField(choices=[('RECOMMENDED', 'Recommended'), ('BOOKED', 'Booked'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='RECOMMENDED', help_text='Track the current state of test', max_length=20)),
                ('category_snapshot', models.CharField(blank=True, max_length=100, null=True)),
                ('source', models.CharField(blank=True, help_text='Indicates how test was added: doctor, patient_upload, external_prescription', max_length=30, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('consultation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_recommendations', to='consultations.consultation')),
                ('recommended_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='diagnostic.medicaltest')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='testbooking',
            name='recommendation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='diagnostic.testrecommendation'),
        ),
        migrations.CreateModel(
            name='TestReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('test_pnr', models.CharField(blank=True, db_index=True, max_length=15, null=True)),
                ('file', models.FileField(upload_to=diagnostic.utils.report_upload_path)),
                ('is_external', models.BooleanField(default=False)),
                ('comments', models.TextField(blank=True, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='report', to='diagnostic.testbooking')),
                ('consultation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='test_reports', to='consultations.consultation')),
                ('lab', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='diagnostic.diagnosticlab')),
                ('patient_profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='test_reports', to='patient_account.patientprofile')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='bookinggroup',
            index=models.Index(fields=['consultation'], name='diagnostic__consult_302111_idx'),
        ),
        migrations.AddIndex(
            model_name='bookinggroup',
            index=models.Index(fields=['patient_profile'], name='diagnostic__patient_dfe91d_idx'),
        ),
        migrations.AddIndex(
            model_name='bookinggroup',
            index=models.Index(fields=['status'], name='diagnostic__status_e3b177_idx'),
        ),
        migrations.AddIndex(
            model_name='diagnosticlab',
            index=models.Index(fields=['lab_type'], name='diagnostic__lab_typ_6af40a_idx'),
        ),
        migrations.AddIndex(
            model_name='diagnosticlab',
            index=models.Index(fields=['is_active'], name='diagnostic__is_acti_588ed3_idx'),
        ),
        migrations.AddIndex(
            model_name='medicaltest',
            index=models.Index(fields=['type'], name='diagnostic__type_599991_idx'),
        ),
        migrations.AddIndex(
            model_name='medicaltest',
            index=models.Index(fields=['is_active'], name='diagnostic__is_acti_c56b86_idx'),
        ),
        migrations.AddConstraint(
            model_name='medicaltest',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', True), ('name__isnull', False)), fields=('name',), name='unique_lowercase_test_name'),
        ),
        migrations.AddIndex(
            model_name='testlabmapping',
            index=models.Index(fields=['lab'], name='diagnostic__lab_id_0ab509_idx'),
        ),
        migrations.AddIndex(
            model_name='testlabmapping',
            index=models.Index(fields=['test'], name='diagnostic__test_id_10743c_idx'),
        ),
        migrations.AddIndex(
            model_name='testlabmapping',
            index=models.Index(fields=['is_active'], name='diagnostic__is_acti_f80078_idx'),
        ),
        migrations.AddConstraint(
            model_name='testlabmapping',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', True)), fields=('test', 'lab'), name='unique_active_test_lab'),
        ),
        migrations.AddIndex(
            model_name='testpackage',
            index=models.Index(fields=['name'], name='diagnostic__name_adb68d_idx'),
        ),
        migrations.AddIndex(
            model_name='testpackage',
            index=models.Index(fields=['category'], name='diagnostic__categor_5b19cd_idx'),
        ),
        migrations.AddIndex(
            model_name='testpackage',
            index=models.Index(fields=['is_active'], name='diagnostic__is_acti_3ee997_idx'),
        ),
        migrations.AddConstraint(
            model_name='testpackage',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', True)), fields=('name',), name='unique_active_package_name'),
        ),
        migrations.AddIndex(
            model_name='packagerecommendation',
            index=models.Index(fields=['consultation'], name='diagnostic__consult_bd22df_idx'),
        ),
        migrations.AddIndex(
            model_name='packagerecommendation',
            index=models.Index(fields=['is_active'], name='diagnostic__is_acti_52c1de_idx'),
        ),
        migrations.AddConstraint(
            model_name='packagerecommendation',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', True)), fields=('consultation', 'package'), name='unique_active_consultation_package'),
        ),
        migrations.AlterUniqueTogether(
            name='packagerecommendation',
            unique_together={('consultation', 'package')},
        ),
        migrations.AddIndex(
            model_name='packagelabmapping',
            index=models.Index(fields=['lab'], name='diagnostic__lab_id_60b59b_idx'),
        ),
        migrations.AddIndex(
            model_name='packagelabmapping',
            index=models.Index(fields=['package'], name='diagnostic__package_b03278_idx'),
        ),
        migrations.AddIndex(
            model_name='packagelabmapping',
            index=models.Index(fields=['is_active'], name='diagnostic__is_acti_4aad94_idx'),
        ),
        migrations.AddConstraint(
            model_name='packagelabmapping',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', True)), fields=('package', 'lab'), name='unique_active_package_lab'),
        ),
        migrations.AddIndex(
            model_name='testrecommendation',
            index=models.Index(fields=['consultation'], name='diagnostic__consult_84951f_idx'),
        ),
        migrations.AddIndex(
            model_name='testrecommendation',
            index=models.Index(fields=['test'], name='diagnostic__test_id_6a2e84_idx'),
        ),
        migrations.AddIndex(
            model_name='testrecommendation',
            index=models.Index(fields=['is_active'], name='diagnostic__is_acti_79ad63_idx'),
        ),
        migrations.AddConstraint(
            model_name='testrecommendation',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', True), ('test__isnull', False)), fields=('consultation', 'test'), name='unique_consultation_test'),
        ),
        migrations.AddIndex(
            model_name='testbooking',
            index=models.Index(fields=['consultation'], name='diagnostic__consult_235727_idx'),
        ),
        migrations.AddIndex(
            model_name='testbooking',
            index=models.Index(fields=['patient_profile'], name='diagnostic__patient_b94018_idx'),
        ),
        migrations.AddIndex(
            model_name='testbooking',
            index=models.Index(fields=['lab'], name='diagnostic__lab_id_af5cd3_idx'),
        ),
        migrations.AddIndex(
            model_name='testbooking',
            index=models.Index(fields=['is_active'], name='diagnostic__is_acti_a408bd_idx'),
        ),
        migrations.AddConstraint(
            model_name='testbooking',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', True)), fields=('recommendation',), name='unique_booking_per_recommendation'),
        ),
        migrations.AddIndex(
            model_name='testreport',
            index=models.Index(fields=['test_pnr'], name='diagnostic__test_pn_afe861_idx'),
        ),
        migrations.AddIndex(
            model_name='testreport',
            index=models.Index(fields=['consultation'], name='diagnostic__consult_4799f3_idx'),
        ),
        migrations.AddIndex(
            model_name='testreport',
            index=models.Index(fields=['patient_profile'], name='diagnostic__patient_c6e45c_idx'),
        ),
        migrations.AddIndex(
            model_name='testreport',
            index=models.Index(fields=['is_active'], name='diagnostic__is_acti_4aecbb_idx'),
        ),
    ]
