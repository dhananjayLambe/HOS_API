# Generated by Django 5.0.7 on 2025-06-19 07:14

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('clinic', '0001_initial'),
        ('doctor', '0001_initial'),
        ('patient_account', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('appointment_date', models.DateField()),
                ('appointment_time', models.TimeField()),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], default='scheduled', max_length=20)),
                ('payment_mode', models.CharField(choices=[('CASH', 'Cash'), ('ONLINE', 'Online')], default='CASH', max_length=10)),
                ('payment_status', models.BooleanField(default=False)),
                ('consultation_mode', models.CharField(choices=[('clinic', 'Clinic Visit'), ('video', 'Video Consultation')], default='clinic', max_length=10)),
                ('booking_source', models.CharField(choices=[('online', 'Online Booking (App/Website)'), ('walk_in', 'Walk-In Booking (At Clinic)')], default='online', max_length=10)),
                ('consultation_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('appointment_type', models.CharField(choices=[('new', 'New'), ('follow_up', 'Follow-up')], default='new', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='clinic.clinic')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='doctor.doctor')),
                ('patient_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='patient_account.patientaccount')),
                ('patient_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='patient_account.patientprofile')),
                ('previous_appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='appointments.appointment')),
            ],
        ),
        migrations.CreateModel(
            name='DoctorAvailability',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('availability', models.JSONField(default=list, help_text='Stores day-wise availability')),
                ('slot_duration', models.PositiveIntegerField(default=10, help_text='Duration per patient (minutes)')),
                ('buffer_time', models.PositiveIntegerField(default=5, help_text='Gap between appointments (minutes)')),
                ('max_appointments_per_day', models.PositiveIntegerField(default=20, help_text='Daily limit')),
                ('emergency_slots', models.PositiveIntegerField(default=2, help_text='Reserved emergency slots')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.clinic')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='doctor.doctor')),
            ],
            options={
                'unique_together': {('doctor', 'clinic')},
            },
        ),
        migrations.CreateModel(
            name='DoctorFeeStructure',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_time_consultation_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('follow_up_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('case_paper_duration', models.PositiveIntegerField(help_text='Case paper validity in days')),
                ('case_paper_renewal_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('emergency_consultation_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('online_consultation_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('cancellation_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('rescheduling_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.clinic')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='doctor.doctor')),
            ],
            options={
                'unique_together': {('doctor', 'clinic')},
            },
        ),
        migrations.CreateModel(
            name='DoctorLeave',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_date', models.DateField(help_text='Start date of the leave')),
                ('end_date', models.DateField(help_text='End date of the leave')),
                ('half_day', models.BooleanField(default=False, help_text='Is it a half-day leave?')),
                ('leave_type', models.CharField(choices=[('sick', 'Sick Leave'), ('vacation', 'Vacation'), ('emergency', 'Emergency'), ('other', 'Other')], default='other', max_length=20)),
                ('reason', models.TextField(blank=True, help_text='Optional reason for leave', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clinic_leaves', to='clinic.clinic')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaves', to='doctor.doctor')),
            ],
            options={
                'ordering': ['-start_date'],
                'unique_together': {('doctor', 'clinic', 'start_date', 'end_date')},
            },
        ),
        migrations.CreateModel(
            name='DoctorOPDStatus',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_available', models.BooleanField(default=False, help_text='True if doctor is in OPD, False if away')),
                ('check_in_time', models.DateTimeField(blank=True, help_text='When doctor starts OPD', null=True)),
                ('check_out_time', models.DateTimeField(blank=True, help_text='When doctor leaves OPD', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='opd_status', to='clinic.clinic')),
                ('doctor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='opd_status', to='doctor.doctor')),
            ],
            options={
                'unique_together': {('doctor', 'clinic')},
            },
        ),
        migrations.CreateModel(
            name='FollowUpPolicy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('follow_up_duration', models.PositiveIntegerField(help_text='Follow-up validity in days (e.g., 7, 15, 30)')),
                ('follow_up_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('max_follow_up_visits', models.PositiveIntegerField(default=1, help_text='Maximum follow-ups allowed in duration')),
                ('allow_online_follow_up', models.BooleanField(default=True, help_text='Can follow-up be done online?')),
                ('online_follow_up_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('access_past_appointments', models.BooleanField(default=True, help_text='Can doctor view past visits?')),
                ('access_past_prescriptions', models.BooleanField(default=True, help_text='Can doctor view old prescriptions?')),
                ('access_past_reports', models.BooleanField(default=True, help_text='Can doctor view test reports?')),
                ('access_other_clinic_history', models.BooleanField(default=False, help_text='Can doctor see history from other clinics?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.clinic')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='doctor.doctor')),
            ],
            options={
                'unique_together': {('doctor', 'clinic')},
            },
        ),
    ]
